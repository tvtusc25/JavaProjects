package interfaces;

import exceptions.BadTableException;
import exceptions.BadInputException;
import exceptions.NDTransitionException;

/**
 * Interface for finite state machine (FSM).
 *
 */
public interface IFiniteStateMachine {

    /**
     * Adds the given transition to the FSM. The current_state of the first transition added to the FSM is treated as the initial state for the FSM.
     * @param transition the transition to add
     * @throws NDTransitionException when the finite state machine's transition table already contains another transition with the same current_state and input pair.
     */
    void addTransition(ITransition transition) throws NDTransitionException;

    /**
     * This runs the finite state machine, starting at its initial state and making transitions between states based on the given input sequence and barring any exceptions, finally returning the resulting output sequence.
     * @param input the input sequence/word to the FSM as a sequence of characters in a string
     * @return the output sequence/word generated by this FSM for the given input sequence
     * @throws BadTableException if the transition table (describing the FSM) contains transitions to illegal (i.e. non-existent) states or is missing one or more transitions from states for valid letters in the input alphabet.
     * @throws BadInputException if the given input sequence contains a character that is not an element of the input alphabet
     */
    String interpret(String input) throws BadTableException, BadInputException;

}
